module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Blank": parse_Blank,
        "ClassTag": parse_ClassTag,
        "ConstructorTag": parse_ConstructorTag,
        "DefaultValue": parse_DefaultValue,
        "Description": parse_Description,
        "DescriptionSpan": parse_DescriptionSpan,
        "Identifier": parse_Identifier,
        "IdentifierChar": parse_IdentifierChar,
        "IdentifierStart": parse_IdentifierStart,
        "LineTerminatorSequence": parse_LineTerminatorSequence,
        "NonBlank": parse_NonBlank,
        "ParamTag": parse_ParamTag,
        "PropertyTag": parse_PropertyTag,
        "ReturnTag": parse_ReturnTag,
        "Tag": parse_Tag,
        "TagList": parse_TagList,
        "TypeList": parse_TypeList,
        "WhiteSpace": parse_WhiteSpace,
        "Zs": parse_Zs,
        "_": parse__,
        "__": parse___,
        "start": parse_start
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result6 = parse_Description();
        var result3 = result6 !== null ? result6 : '';
        if (result3 !== null) {
          var result5 = parse_TagList();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(description, tags) {
              var tags = tags === '' ? [] : tags;
              if (description !== '') {
                tags = [{name: 'description', value: {description: description}}].concat(tags);
              }
              return tags;
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Description() {
        var cacheKey = 'Description@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "@") {
            var result9 = "@";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"@\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result9 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result8 = parse_NonBlank();
            if (result8 !== null) {
              var result5 = [];
              while (result8 !== null) {
                result5.push(result8);
                var result8 = parse_NonBlank();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_DescriptionSpan();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_DescriptionSpan();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(start, rest) {
              return start.join('') + rest.join('');
            })(result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DescriptionSpan() {
        var cacheKey = 'DescriptionSpan@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result8 = parse_Blank();
        if (result8 !== null) {
          var result3 = [];
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_Blank();
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "@") {
            var result7 = "@";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"@\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result6 = parse_NonBlank();
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_NonBlank();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ws, chars) {
              return ws.join('') + chars.join('');
            })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Blank() {
        var cacheKey = 'Blank@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_WhiteSpace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_LineTerminatorSequence();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(ws) {return ws;})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NonBlank() {
        var cacheKey = 'NonBlank@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result7 = parse_WhiteSpace();
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result6 = parse_LineTerminatorSequence();
          if (result6 !== null) {
            var result5 = result6;
          } else {
            var result5 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          if (input.length > pos) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(char) {return char;})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TagList() {
        var cacheKey = 'TagList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_Tag();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_Tag();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(tags) {
              return tags;
            })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Tag() {
        var cacheKey = 'Tag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          var result9 = parse_ParamTag();
          if (result9 !== null) {
            var result4 = result9;
          } else {
            var result8 = parse_ReturnTag();
            if (result8 !== null) {
              var result4 = result8;
            } else {
              var result7 = parse_ClassTag();
              if (result7 !== null) {
                var result4 = result7;
              } else {
                var result6 = parse_ConstructorTag();
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  var result5 = parse_PropertyTag();
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            };
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(tag) {
                return tag;
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DefaultValue() {
        var cacheKey = 'DefaultValue@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result9 = parse_Blank();
        while (result9 !== null) {
          result3.push(result9);
          var result9 = parse_Blank();
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "=") {
            var result4 = "=";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result8 = parse_Blank();
            while (result8 !== null) {
              result5.push(result8);
              var result8 = parse_Blank();
            }
            if (result5 !== null) {
              if (input.substr(pos).match(/^[^\]]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\]]");
                }
              }
              if (result7 !== null) {
                var result6 = [];
                while (result7 !== null) {
                  result6.push(result7);
                  if (input.substr(pos).match(/^[^\]]/) !== null) {
                    var result7 = input.charAt(pos);
                    pos++;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("[^\\]]");
                    }
                  }
                }
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {
              return chars.join('');
            })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ParamTag() {
        var cacheKey = 'ParamTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "@param") {
          var result3 = "@param";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@param\"");
          }
        }
        if (result3 !== null) {
          var result23 = parse_TypeList();
          var result4 = result23 !== null ? result23 : '';
          if (result4 !== null) {
            var result22 = parse_Blank();
            if (result22 !== null) {
              var result5 = [];
              while (result22 !== null) {
                result5.push(result22);
                var result22 = parse_Blank();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var savedPos3 = pos;
              if (input.substr(pos, 1) === "[") {
                var result19 = "[";
                pos += 1;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("\"[\"");
                }
              }
              if (result19 !== null) {
                var result20 = [];
                var result21 = parse_Blank();
                while (result21 !== null) {
                  result20.push(result21);
                  var result21 = parse_Blank();
                }
                if (result20 !== null) {
                  var result18 = [result19, result20];
                } else {
                  var result18 = null;
                  pos = savedPos3;
                }
              } else {
                var result18 = null;
                pos = savedPos3;
              }
              var result6 = result18 !== null ? result18 : '';
              if (result6 !== null) {
                var result7 = parse_Identifier();
                if (result7 !== null) {
                  var result17 = parse_DefaultValue();
                  var result8 = result17 !== null ? result17 : '';
                  if (result8 !== null) {
                    var savedPos2 = pos;
                    var result14 = [];
                    var result16 = parse_Blank();
                    while (result16 !== null) {
                      result14.push(result16);
                      var result16 = parse_Blank();
                    }
                    if (result14 !== null) {
                      if (input.substr(pos, 1) === "]") {
                        var result15 = "]";
                        pos += 1;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (result15 !== null) {
                        var result13 = [result14, result15];
                      } else {
                        var result13 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos2;
                    }
                    var result9 = result13 !== null ? result13 : '';
                    if (result9 !== null) {
                      var result12 = parse_Blank();
                      if (result12 !== null) {
                        var result10 = [];
                        while (result12 !== null) {
                          result10.push(result12);
                          var result12 = parse_Blank();
                        }
                      } else {
                        var result10 = null;
                      }
                      if (result10 !== null) {
                        var result11 = parse_Description();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(types, lbracket, name, defaultValue, rbracket, text) {
              var tag = {name: 'param', value: {name: name, description: text}};
              if (types !== '') {
                tag.value.types = types;
              }
              if (lbracket !== '') {
                tag.value.optional = true;
              }
              if (defaultValue !== '') {
                  tag.value.defaultValue = defaultValue;
              }
              return tag;
            })(result1[1], result1[3], result1[4], result1[5], result1[6], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ReturnTag() {
        var cacheKey = 'ReturnTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "@return") {
          var result3 = "@return";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@return\"");
          }
        }
        if (result3 !== null) {
          var result8 = parse_TypeList();
          var result4 = result8 !== null ? result8 : '';
          if (result4 !== null) {
            var result7 = parse_Blank();
            if (result7 !== null) {
              var result5 = [];
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_Blank();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = parse_Description();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(types, text) {
              var tag = {name: 'return', value: {description: text}};
              if (types !== '') {
                tag.value.types = types;
              }
              return tag;
            })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassTag() {
        var cacheKey = 'ClassTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "@class") {
          var result3 = "@class";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@class\"");
          }
        }
        if (result3 !== null) {
          var result6 = parse_Blank();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_Blank();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_Description();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(text) {
              return {name: 'classDescription', value: {description: text}};
            })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstructorTag() {
        var cacheKey = 'ConstructorTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 12) === "@constructor") {
          var result3 = "@constructor";
          pos += 12;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@constructor\"");
          }
        }
        if (result3 !== null) {
          var result6 = parse_Blank();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_Blank();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_Description();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(text) {
              return {name: 'constructor', value: {description: text}};
            })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyTag() {
        var cacheKey = 'PropertyTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 9) === "@property") {
          var result3 = "@property";
          pos += 9;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@property\"");
          }
        }
        if (result3 !== null) {
          var result11 = parse_TypeList();
          var result4 = result11 !== null ? result11 : '';
          if (result4 !== null) {
            var result10 = parse_Blank();
            if (result10 !== null) {
              var result5 = [];
              while (result10 !== null) {
                result5.push(result10);
                var result10 = parse_Blank();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = parse_Identifier();
              if (result6 !== null) {
                var result9 = parse_Blank();
                if (result9 !== null) {
                  var result7 = [];
                  while (result9 !== null) {
                    result7.push(result9);
                    var result9 = parse_Blank();
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result8 = parse_Description();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(types, name, text) {
              return {name: 'property', value: {name: name, description: text, types: types}};
            })(result1[1], result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Identifier() {
        var cacheKey = 'Identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IdentifierStart();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_IdentifierChar();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_IdentifierChar();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(start, rest) {return start + rest.join('');})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IdentifierStart() {
        var cacheKey = 'IdentifierStart@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IdentifierChar() {
        var cacheKey = 'IdentifierChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_0-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_WhiteSpace();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_WhiteSpace();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = '__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result3 = parse_WhiteSpace();
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_LineTerminatorSequence();
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result3 = parse_WhiteSpace();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_LineTerminatorSequence();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TypeList() {
        var cacheKey = 'TypeList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result19 = parse_Blank();
        if (result19 !== null) {
          var result3 = [];
          while (result19 !== null) {
            result3.push(result19);
            var result19 = parse_Blank();
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result4 = "{";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result18 = parse_Blank();
            while (result18 !== null) {
              result5.push(result18);
              var result18 = parse_Blank();
            }
            if (result5 !== null) {
              var result6 = parse_Identifier();
              if (result6 !== null) {
                var result7 = [];
                var result17 = parse_Blank();
                while (result17 !== null) {
                  result7.push(result17);
                  var result17 = parse_Blank();
                }
                if (result7 !== null) {
                  var result8 = [];
                  var savedPos2 = pos;
                  if (input.substr(pos, 1) === "|") {
                    var result13 = "|";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"|\"");
                    }
                  }
                  if (result13 !== null) {
                    var result14 = [];
                    var result16 = parse_Blank();
                    while (result16 !== null) {
                      result14.push(result16);
                      var result16 = parse_Blank();
                    }
                    if (result14 !== null) {
                      var result15 = parse_Identifier();
                      if (result15 !== null) {
                        var result12 = [result13, result14, result15];
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                  while (result12 !== null) {
                    result8.push(result12);
                    var savedPos2 = pos;
                    if (input.substr(pos, 1) === "|") {
                      var result13 = "|";
                      pos += 1;
                    } else {
                      var result13 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"|\"");
                      }
                    }
                    if (result13 !== null) {
                      var result14 = [];
                      var result16 = parse_Blank();
                      while (result16 !== null) {
                        result14.push(result16);
                        var result16 = parse_Blank();
                      }
                      if (result14 !== null) {
                        var result15 = parse_Identifier();
                        if (result15 !== null) {
                          var result12 = [result13, result14, result15];
                        } else {
                          var result12 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result11 = parse_Blank();
                    while (result11 !== null) {
                      result9.push(result11);
                      var result11 = parse_Blank();
                    }
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result10 = "}";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(start, rest) {
              var types = [start];
              rest.forEach(function (item, i) {
                types.push(item[2]);
              });
              return types;
            })(result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WhiteSpace() {
        var cacheKey = 'WhiteSpace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[	 \xA0\uFEFF]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[	 \\xA0\\uFEFF]");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Zs();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LineTerminatorSequence() {
        var cacheKey = 'LineTerminatorSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "\n") {
          var result5 = "\n";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 2) === "\r\n") {
            var result4 = "\r\n";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 1) === "\r") {
              var result3 = "\r";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\r\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 1) === "\u2028") {
                var result2 = "\u2028";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\u2028\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 1) === "\u2029") {
                  var result1 = "\u2029";
                  pos += 1;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\u2029\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("end of line");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Zs() {
        var cacheKey = 'Zs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()